//
// PlayerPeersResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PlayerPeersResponse: Codable, JSONEncodable, Hashable {

    /** The player account ID */
    public var accountId: Int?
    /** last_played */
    public var lastPlayed: Int?
    /** win */
    public var win: Int?
    /** games */
    public var games: Int?
    /** with_win */
    public var withWin: Int?
    /** with_games */
    public var withGames: Int?
    /** against_win */
    public var againstWin: Int?
    /** against_games */
    public var againstGames: Int?
    /** with_gpm_sum */
    public var withGpmSum: Int?
    /** with_xpm_sum */
    public var withXpmSum: Int?
    /** Player's Steam name */
    public var personaname: String?
    /** name */
    public var name: String?
    /** is_contributor */
    public var isContributor: Bool?
    /** is_subscriber */
    public var isSubscriber: Bool?
    /** last_login */
    public var lastLogin: String?
    /** avatar */
    public var avatar: String?
    /** avatarfull */
    public var avatarfull: String?

    public init(accountId: Int? = nil, lastPlayed: Int? = nil, win: Int? = nil, games: Int? = nil, withWin: Int? = nil, withGames: Int? = nil, againstWin: Int? = nil, againstGames: Int? = nil, withGpmSum: Int? = nil, withXpmSum: Int? = nil, personaname: String? = nil, name: String? = nil, isContributor: Bool? = nil, isSubscriber: Bool? = nil, lastLogin: String? = nil, avatar: String? = nil, avatarfull: String? = nil) {
        self.accountId = accountId
        self.lastPlayed = lastPlayed
        self.win = win
        self.games = games
        self.withWin = withWin
        self.withGames = withGames
        self.againstWin = againstWin
        self.againstGames = againstGames
        self.withGpmSum = withGpmSum
        self.withXpmSum = withXpmSum
        self.personaname = personaname
        self.name = name
        self.isContributor = isContributor
        self.isSubscriber = isSubscriber
        self.lastLogin = lastLogin
        self.avatar = avatar
        self.avatarfull = avatarfull
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case lastPlayed = "last_played"
        case win
        case games
        case withWin = "with_win"
        case withGames = "with_games"
        case againstWin = "against_win"
        case againstGames = "against_games"
        case withGpmSum = "with_gpm_sum"
        case withXpmSum = "with_xpm_sum"
        case personaname
        case name
        case isContributor = "is_contributor"
        case isSubscriber = "is_subscriber"
        case lastLogin = "last_login"
        case avatar
        case avatarfull
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(lastPlayed, forKey: .lastPlayed)
        try container.encodeIfPresent(win, forKey: .win)
        try container.encodeIfPresent(games, forKey: .games)
        try container.encodeIfPresent(withWin, forKey: .withWin)
        try container.encodeIfPresent(withGames, forKey: .withGames)
        try container.encodeIfPresent(againstWin, forKey: .againstWin)
        try container.encodeIfPresent(againstGames, forKey: .againstGames)
        try container.encodeIfPresent(withGpmSum, forKey: .withGpmSum)
        try container.encodeIfPresent(withXpmSum, forKey: .withXpmSum)
        try container.encodeIfPresent(personaname, forKey: .personaname)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isContributor, forKey: .isContributor)
        try container.encodeIfPresent(isSubscriber, forKey: .isSubscriber)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(avatarfull, forKey: .avatarfull)
    }
}

