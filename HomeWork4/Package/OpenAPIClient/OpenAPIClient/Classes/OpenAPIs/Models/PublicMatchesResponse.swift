//
// PublicMatchesResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PublicMatchesResponse: Codable, JSONEncodable, Hashable {

    /** The ID number of the match assigned by Valve */
    public var matchId: Int?
    /** match_seq_num */
    public var matchSeqNum: Int?
    /** Boolean indicating whether Radiant won the match */
    public var radiantWin: Bool?
    /** The Unix timestamp at which the game started */
    public var startTime: Int?
    /** Duration of the game in seconds */
    public var duration: Int?
    public var lobbyType: Int?
    public var gameMode: Int?
    public var avgRankTier: Int?
    public var numRankTier: Int?
    public var cluster: Int?
    /** radiant_team */
    public var radiantTeam: [Int]?
    /** dire_team */
    public var direTeam: [Int]?

    public init(matchId: Int? = nil, matchSeqNum: Int? = nil, radiantWin: Bool? = nil, startTime: Int? = nil, duration: Int? = nil, lobbyType: Int? = nil, gameMode: Int? = nil, avgRankTier: Int? = nil, numRankTier: Int? = nil, cluster: Int? = nil, radiantTeam: [Int]? = nil, direTeam: [Int]? = nil) {
        self.matchId = matchId
        self.matchSeqNum = matchSeqNum
        self.radiantWin = radiantWin
        self.startTime = startTime
        self.duration = duration
        self.lobbyType = lobbyType
        self.gameMode = gameMode
        self.avgRankTier = avgRankTier
        self.numRankTier = numRankTier
        self.cluster = cluster
        self.radiantTeam = radiantTeam
        self.direTeam = direTeam
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case matchId = "match_id"
        case matchSeqNum = "match_seq_num"
        case radiantWin = "radiant_win"
        case startTime = "start_time"
        case duration
        case lobbyType = "lobby_type"
        case gameMode = "game_mode"
        case avgRankTier = "avg_rank_tier"
        case numRankTier = "num_rank_tier"
        case cluster
        case radiantTeam = "radiant_team"
        case direTeam = "dire_team"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(matchId, forKey: .matchId)
        try container.encodeIfPresent(matchSeqNum, forKey: .matchSeqNum)
        try container.encodeIfPresent(radiantWin, forKey: .radiantWin)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(lobbyType, forKey: .lobbyType)
        try container.encodeIfPresent(gameMode, forKey: .gameMode)
        try container.encodeIfPresent(avgRankTier, forKey: .avgRankTier)
        try container.encodeIfPresent(numRankTier, forKey: .numRankTier)
        try container.encodeIfPresent(cluster, forKey: .cluster)
        try container.encodeIfPresent(radiantTeam, forKey: .radiantTeam)
        try container.encodeIfPresent(direTeam, forKey: .direTeam)
    }
}

