//
// MatchResponsePlayersInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** player */
public struct MatchResponsePlayersInner: Codable, JSONEncodable, Hashable {

    /** The ID number of the match assigned by Valve */
    public var matchId: Int?
    /** Which slot the player is in. 0-127 are Radiant, 128-255 are Dire */
    public var playerSlot: Int?
    /** An array describing how abilities were upgraded */
    public var abilityUpgradesArr: [Int]?
    /** Object containing information on how many times the played used their abilities */
    public var abilityUses: AnyCodable?
    /** Object containing information on who the player used their abilities on */
    public var abilityTargets: AnyCodable?
    /** Object containing information on how and how much damage the player dealt to other heroes */
    public var damageTargets: AnyCodable?
    /** The player account ID */
    public var accountId: Int?
    /** Object containing information on how many and what type of actions the player issued to their hero */
    public var actions: AnyCodable?
    /** Object containing information on additional units the player had under their control */
    public var additionalUnits: [AnyCodable]?
    /** Number of assists the player had */
    public var assists: Int?
    /** Item in backpack slot 0 */
    public var backpack0: Int?
    /** Item in backpack slot 1 */
    public var backpack1: Int?
    /** Item in backpack slot 2 */
    public var backpack2: Int?
    /** Array containing information about buybacks */
    public var buybackLog: [MatchResponsePlayersInnerBuybackLogInner]?
    /** Number of camps stacked */
    public var campsStacked: Int?
    /** Array containing information about the player's disconnections and reconnections */
    public var connectionLog: [MatchResponsePlayersInnerConnectionLogInner]?
    /** Number of creeps stacked */
    public var creepsStacked: Int?
    /** Object containing information about damage dealt by the player to different units */
    public var damage: AnyCodable?
    /** Object containing information about about the sources of this player's damage to heroes */
    public var damageInflictor: AnyCodable?
    /** Object containing information about the sources of damage received by this player from heroes */
    public var damageInflictorReceived: AnyCodable?
    /** Object containing information about from whom the player took damage */
    public var damageTaken: AnyCodable?
    /** Number of deaths */
    public var deaths: Int?
    /** Number of denies */
    public var denies: Int?
    /** Array containing number of denies at different times of the match */
    public var dnT: [Int]?
    /** Gold at the end of the game */
    public var gold: Int?
    /** Gold Per Minute obtained by this player */
    public var goldPerMin: Int?
    /** Object containing information on how the player gainined gold over the course of the match */
    public var goldReasons: AnyCodable?
    /** How much gold the player spent */
    public var goldSpent: Int?
    /** Array containing total gold at different times of the match */
    public var goldT: [Int]?
    /** Hero Damage Dealt */
    public var heroDamage: Int?
    /** Hero Healing Done */
    public var heroHealing: Int?
    /** Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors */
    public var heroHits: AnyCodable?
    /** The ID value of the hero played */
    public var heroId: Int?
    /** Item in the player's first slot */
    public var item0: Int?
    /** Item in the player's second slot */
    public var item1: Int?
    /** Item in the player's third slot */
    public var item2: Int?
    /** Item in the player's fourth slot */
    public var item3: Int?
    /** Item in the player's fifth slot */
    public var item4: Int?
    /** Item in the player's sixth slot */
    public var item5: Int?
    /** Object containing information about how many times a player used items */
    public var itemUses: AnyCodable?
    /** Object containing information about the player's killstreaks */
    public var killStreaks: AnyCodable?
    /** Object containing information about what units the player killed */
    public var killed: AnyCodable?
    /** Object containing information about who killed the player */
    public var killedBy: AnyCodable?
    /** Number of kills */
    public var kills: Int?
    /** Array containing information on which hero the player killed at what time */
    public var killsLog: [MatchResponsePlayersInnerKillsLogInner]?
    /** Object containing information on lane position */
    public var lanePos: AnyCodable?
    /** Number of last hits */
    public var lastHits: Int?
    /** Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
    public var leaverStatus: Int?
    /** Level at the end of the game */
    public var level: Int?
    /** Array describing last hits at each minute in the game */
    public var lhT: [Int]?
    /** life_state */
    public var lifeState: AnyCodable?
    /** Object with information on the highest damage instance the player inflicted */
    public var maxHeroHit: AnyCodable?
    /** Object with information on the number of the number of multikills the player had */
    public var multiKills: AnyCodable?
    /** Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192. */
    public var obs: AnyCodable?
    /** obs_left_log */
    public var obsLeftLog: [AnyCodable]?
    /** Object containing information on when and where the player placed observer wards */
    public var obsLog: [AnyCodable]?
    /** Total number of observer wards placed */
    public var obsPlaced: Int?
    /** party_id */
    public var partyId: Int?
    /** Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json */
    public var permanentBuffs: [AnyCodable]?
    /** 1-indexed facet, see https://github.com/odota/dotaconstants/blob/master/build/hero_abilities.json */
    public var heroVariant: Int?
    /** Total number of pings */
    public var pings: Int?
    /** Object containing information on the items the player purchased */
    public var purchase: AnyCodable?
    /** Object containing information on when items were purchased */
    public var purchaseLog: [MatchResponsePlayersInnerPurchaseLogInner]?
    /** Number of runes picked up */
    public var runePickups: Int?
    /** Object with information about which runes the player picked up */
    public var runes: [String: Int]?
    /** Array with information on when runes were picked up */
    public var runesLog: [MatchResponsePlayersInnerRunesLogInner]?
    /** Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192. */
    public var sen: AnyCodable?
    /** Array containing information on when and where the player placed sentries */
    public var senLeftLog: [AnyCodable]?
    /** Array with information on when and where sentries were placed by the player */
    public var senLog: [AnyCodable]?
    /** How many sentries were placed by the player */
    public var senPlaced: Int?
    /** Total stun duration of all stuns by the player */
    public var stuns: Double?
    /** Time in seconds corresponding to the time of entries of other arrays in the match. */
    public var times: [Int]?
    /** Total tower damage done by the player */
    public var towerDamage: Int?
    /** Experience Per Minute obtained by the player */
    public var xpPerMin: Int?
    /** Object containing information on the sources of this player's experience */
    public var xpReasons: AnyCodable?
    /** Experience at each minute of the game */
    public var xpT: [Int]?
    /** Player's Steam name */
    public var personaname: String?
    /** name */
    public var name: String?
    /** Time of player's last login */
    public var lastLogin: Date?
    /** Boolean indicating whether Radiant won the match */
    public var radiantWin: Bool?
    /** The Unix timestamp at which the game started */
    public var startTime: Int?
    /** Duration of the game in seconds */
    public var duration: Int?
    /** cluster */
    public var cluster: Int?
    /** Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
    public var lobbyType: Int?
    /** Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
    public var gameMode: Int?
    /** Patch ID, from dotaconstants */
    public var patch: Int?
    /** Integer corresponding to the region the game was played on */
    public var region: Int?
    /** Boolean for whether or not the player is on Radiant */
    public var isRadiant: Bool?
    /** Binary integer representing whether or not the player won */
    public var win: Int?
    /** Binary integer representing whether or not the player lost */
    public var lose: Int?
    /** Total gold at the end of the game */
    public var totalGold: Int?
    /** Total experience at the end of the game */
    public var totalXp: Int?
    /** Number of kills per minute */
    public var killsPerMin: Double?
    /** kda */
    public var kda: Double?
    /** abandons */
    public var abandons: Int?
    /** Total number of neutral creeps killed */
    public var neutralKills: Int?
    /** Total number of tower kills the player had */
    public var towerKills: Int?
    /** Total number of courier kills the player had */
    public var courierKills: Int?
    /** Total number of lane creeps killed by the player */
    public var laneKills: Int?
    /** Total number of heroes killed by the player */
    public var heroKills: Int?
    /** Total number of observer wards killed by the player */
    public var observerKills: Int?
    /** Total number of sentry wards killed by the player */
    public var sentryKills: Int?
    /** Total number of roshan kills (last hit on roshan) the player had */
    public var roshanKills: Int?
    /** Total number of Necronomicon creeps killed by the player */
    public var necronomiconKills: Int?
    /** Total number of Ancient creeps killed by the player */
    public var ancientKills: Int?
    /** Total number of buyback the player used */
    public var buybackCount: Int?
    /** Number of observer wards used */
    public var observerUses: Int?
    /** Number of sentry wards used */
    public var sentryUses: Int?
    /** lane_efficiency */
    public var laneEfficiency: Double?
    /** lane_efficiency_pct */
    public var laneEfficiencyPct: Double?
    /** Integer referring to which lane the hero laned in */
    public var lane: Int?
    /** lane_role */
    public var laneRole: Int?
    /** Boolean referring to whether or not the player roamed */
    public var isRoaming: Bool?
    /** Object with information on when the player last purchased an item */
    public var purchaseTime: AnyCodable?
    /** Object with information on when the player first puchased an item */
    public var firstPurchaseTime: AnyCodable?
    /** Object with information on whether or not the item won */
    public var itemWin: AnyCodable?
    /** Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1) */
    public var itemUsage: AnyCodable?
    /** Total number of TP scrolls purchased by the player */
    public var purchaseTpscroll: Int?
    /** Actions per minute */
    public var actionsPerMin: Int?
    /** life_state_dead */
    public var lifeStateDead: Int?
    /** The rank tier of the player. Tens place indicates rank, ones place indicates stars. */
    public var rankTier: Int?
    /** cosmetics */
    public var cosmetics: [MatchResponsePlayersInnerCosmeticsInner]?
    /** Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc */
    public var benchmarks: AnyCodable?
    /** Object containing information on neutral tokens drops */
    public var neutralTokensLog: [MatchResponsePlayersInnerNeutralTokensLogInner]?
    /** Object containing information on neutral item history */
    public var neutralItemHistory: [MatchResponsePlayersInnerNeutralItemHistoryInner]?

    public init(matchId: Int? = nil, playerSlot: Int? = nil, abilityUpgradesArr: [Int]? = nil, abilityUses: AnyCodable? = nil, abilityTargets: AnyCodable? = nil, damageTargets: AnyCodable? = nil, accountId: Int? = nil, actions: AnyCodable? = nil, additionalUnits: [AnyCodable]? = nil, assists: Int? = nil, backpack0: Int? = nil, backpack1: Int? = nil, backpack2: Int? = nil, buybackLog: [MatchResponsePlayersInnerBuybackLogInner]? = nil, campsStacked: Int? = nil, connectionLog: [MatchResponsePlayersInnerConnectionLogInner]? = nil, creepsStacked: Int? = nil, damage: AnyCodable? = nil, damageInflictor: AnyCodable? = nil, damageInflictorReceived: AnyCodable? = nil, damageTaken: AnyCodable? = nil, deaths: Int? = nil, denies: Int? = nil, dnT: [Int]? = nil, gold: Int? = nil, goldPerMin: Int? = nil, goldReasons: AnyCodable? = nil, goldSpent: Int? = nil, goldT: [Int]? = nil, heroDamage: Int? = nil, heroHealing: Int? = nil, heroHits: AnyCodable? = nil, heroId: Int? = nil, item0: Int? = nil, item1: Int? = nil, item2: Int? = nil, item3: Int? = nil, item4: Int? = nil, item5: Int? = nil, itemUses: AnyCodable? = nil, killStreaks: AnyCodable? = nil, killed: AnyCodable? = nil, killedBy: AnyCodable? = nil, kills: Int? = nil, killsLog: [MatchResponsePlayersInnerKillsLogInner]? = nil, lanePos: AnyCodable? = nil, lastHits: Int? = nil, leaverStatus: Int? = nil, level: Int? = nil, lhT: [Int]? = nil, lifeState: AnyCodable? = nil, maxHeroHit: AnyCodable? = nil, multiKills: AnyCodable? = nil, obs: AnyCodable? = nil, obsLeftLog: [AnyCodable]? = nil, obsLog: [AnyCodable]? = nil, obsPlaced: Int? = nil, partyId: Int? = nil, permanentBuffs: [AnyCodable]? = nil, heroVariant: Int? = nil, pings: Int? = nil, purchase: AnyCodable? = nil, purchaseLog: [MatchResponsePlayersInnerPurchaseLogInner]? = nil, runePickups: Int? = nil, runes: [String: Int]? = nil, runesLog: [MatchResponsePlayersInnerRunesLogInner]? = nil, sen: AnyCodable? = nil, senLeftLog: [AnyCodable]? = nil, senLog: [AnyCodable]? = nil, senPlaced: Int? = nil, stuns: Double? = nil, times: [Int]? = nil, towerDamage: Int? = nil, xpPerMin: Int? = nil, xpReasons: AnyCodable? = nil, xpT: [Int]? = nil, personaname: String? = nil, name: String? = nil, lastLogin: Date? = nil, radiantWin: Bool? = nil, startTime: Int? = nil, duration: Int? = nil, cluster: Int? = nil, lobbyType: Int? = nil, gameMode: Int? = nil, patch: Int? = nil, region: Int? = nil, isRadiant: Bool? = nil, win: Int? = nil, lose: Int? = nil, totalGold: Int? = nil, totalXp: Int? = nil, killsPerMin: Double? = nil, kda: Double? = nil, abandons: Int? = nil, neutralKills: Int? = nil, towerKills: Int? = nil, courierKills: Int? = nil, laneKills: Int? = nil, heroKills: Int? = nil, observerKills: Int? = nil, sentryKills: Int? = nil, roshanKills: Int? = nil, necronomiconKills: Int? = nil, ancientKills: Int? = nil, buybackCount: Int? = nil, observerUses: Int? = nil, sentryUses: Int? = nil, laneEfficiency: Double? = nil, laneEfficiencyPct: Double? = nil, lane: Int? = nil, laneRole: Int? = nil, isRoaming: Bool? = nil, purchaseTime: AnyCodable? = nil, firstPurchaseTime: AnyCodable? = nil, itemWin: AnyCodable? = nil, itemUsage: AnyCodable? = nil, purchaseTpscroll: Int? = nil, actionsPerMin: Int? = nil, lifeStateDead: Int? = nil, rankTier: Int? = nil, cosmetics: [MatchResponsePlayersInnerCosmeticsInner]? = nil, benchmarks: AnyCodable? = nil, neutralTokensLog: [MatchResponsePlayersInnerNeutralTokensLogInner]? = nil, neutralItemHistory: [MatchResponsePlayersInnerNeutralItemHistoryInner]? = nil) {
        self.matchId = matchId
        self.playerSlot = playerSlot
        self.abilityUpgradesArr = abilityUpgradesArr
        self.abilityUses = abilityUses
        self.abilityTargets = abilityTargets
        self.damageTargets = damageTargets
        self.accountId = accountId
        self.actions = actions
        self.additionalUnits = additionalUnits
        self.assists = assists
        self.backpack0 = backpack0
        self.backpack1 = backpack1
        self.backpack2 = backpack2
        self.buybackLog = buybackLog
        self.campsStacked = campsStacked
        self.connectionLog = connectionLog
        self.creepsStacked = creepsStacked
        self.damage = damage
        self.damageInflictor = damageInflictor
        self.damageInflictorReceived = damageInflictorReceived
        self.damageTaken = damageTaken
        self.deaths = deaths
        self.denies = denies
        self.dnT = dnT
        self.gold = gold
        self.goldPerMin = goldPerMin
        self.goldReasons = goldReasons
        self.goldSpent = goldSpent
        self.goldT = goldT
        self.heroDamage = heroDamage
        self.heroHealing = heroHealing
        self.heroHits = heroHits
        self.heroId = heroId
        self.item0 = item0
        self.item1 = item1
        self.item2 = item2
        self.item3 = item3
        self.item4 = item4
        self.item5 = item5
        self.itemUses = itemUses
        self.killStreaks = killStreaks
        self.killed = killed
        self.killedBy = killedBy
        self.kills = kills
        self.killsLog = killsLog
        self.lanePos = lanePos
        self.lastHits = lastHits
        self.leaverStatus = leaverStatus
        self.level = level
        self.lhT = lhT
        self.lifeState = lifeState
        self.maxHeroHit = maxHeroHit
        self.multiKills = multiKills
        self.obs = obs
        self.obsLeftLog = obsLeftLog
        self.obsLog = obsLog
        self.obsPlaced = obsPlaced
        self.partyId = partyId
        self.permanentBuffs = permanentBuffs
        self.heroVariant = heroVariant
        self.pings = pings
        self.purchase = purchase
        self.purchaseLog = purchaseLog
        self.runePickups = runePickups
        self.runes = runes
        self.runesLog = runesLog
        self.sen = sen
        self.senLeftLog = senLeftLog
        self.senLog = senLog
        self.senPlaced = senPlaced
        self.stuns = stuns
        self.times = times
        self.towerDamage = towerDamage
        self.xpPerMin = xpPerMin
        self.xpReasons = xpReasons
        self.xpT = xpT
        self.personaname = personaname
        self.name = name
        self.lastLogin = lastLogin
        self.radiantWin = radiantWin
        self.startTime = startTime
        self.duration = duration
        self.cluster = cluster
        self.lobbyType = lobbyType
        self.gameMode = gameMode
        self.patch = patch
        self.region = region
        self.isRadiant = isRadiant
        self.win = win
        self.lose = lose
        self.totalGold = totalGold
        self.totalXp = totalXp
        self.killsPerMin = killsPerMin
        self.kda = kda
        self.abandons = abandons
        self.neutralKills = neutralKills
        self.towerKills = towerKills
        self.courierKills = courierKills
        self.laneKills = laneKills
        self.heroKills = heroKills
        self.observerKills = observerKills
        self.sentryKills = sentryKills
        self.roshanKills = roshanKills
        self.necronomiconKills = necronomiconKills
        self.ancientKills = ancientKills
        self.buybackCount = buybackCount
        self.observerUses = observerUses
        self.sentryUses = sentryUses
        self.laneEfficiency = laneEfficiency
        self.laneEfficiencyPct = laneEfficiencyPct
        self.lane = lane
        self.laneRole = laneRole
        self.isRoaming = isRoaming
        self.purchaseTime = purchaseTime
        self.firstPurchaseTime = firstPurchaseTime
        self.itemWin = itemWin
        self.itemUsage = itemUsage
        self.purchaseTpscroll = purchaseTpscroll
        self.actionsPerMin = actionsPerMin
        self.lifeStateDead = lifeStateDead
        self.rankTier = rankTier
        self.cosmetics = cosmetics
        self.benchmarks = benchmarks
        self.neutralTokensLog = neutralTokensLog
        self.neutralItemHistory = neutralItemHistory
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case matchId = "match_id"
        case playerSlot = "player_slot"
        case abilityUpgradesArr = "ability_upgrades_arr"
        case abilityUses = "ability_uses"
        case abilityTargets = "ability_targets"
        case damageTargets = "damage_targets"
        case accountId = "account_id"
        case actions
        case additionalUnits = "additional_units"
        case assists
        case backpack0 = "backpack_0"
        case backpack1 = "backpack_1"
        case backpack2 = "backpack_2"
        case buybackLog = "buyback_log"
        case campsStacked = "camps_stacked"
        case connectionLog = "connection_log"
        case creepsStacked = "creeps_stacked"
        case damage
        case damageInflictor = "damage_inflictor"
        case damageInflictorReceived = "damage_inflictor_received"
        case damageTaken = "damage_taken"
        case deaths
        case denies
        case dnT = "dn_t"
        case gold
        case goldPerMin = "gold_per_min"
        case goldReasons = "gold_reasons"
        case goldSpent = "gold_spent"
        case goldT = "gold_t"
        case heroDamage = "hero_damage"
        case heroHealing = "hero_healing"
        case heroHits = "hero_hits"
        case heroId = "hero_id"
        case item0 = "item_0"
        case item1 = "item_1"
        case item2 = "item_2"
        case item3 = "item_3"
        case item4 = "item_4"
        case item5 = "item_5"
        case itemUses = "item_uses"
        case killStreaks = "kill_streaks"
        case killed
        case killedBy = "killed_by"
        case kills
        case killsLog = "kills_log"
        case lanePos = "lane_pos"
        case lastHits = "last_hits"
        case leaverStatus = "leaver_status"
        case level
        case lhT = "lh_t"
        case lifeState = "life_state"
        case maxHeroHit = "max_hero_hit"
        case multiKills = "multi_kills"
        case obs
        case obsLeftLog = "obs_left_log"
        case obsLog = "obs_log"
        case obsPlaced = "obs_placed"
        case partyId = "party_id"
        case permanentBuffs = "permanent_buffs"
        case heroVariant = "hero_variant"
        case pings
        case purchase
        case purchaseLog = "purchase_log"
        case runePickups = "rune_pickups"
        case runes
        case runesLog = "runes_log"
        case sen
        case senLeftLog = "sen_left_log"
        case senLog = "sen_log"
        case senPlaced = "sen_placed"
        case stuns
        case times
        case towerDamage = "tower_damage"
        case xpPerMin = "xp_per_min"
        case xpReasons = "xp_reasons"
        case xpT = "xp_t"
        case personaname
        case name
        case lastLogin = "last_login"
        case radiantWin = "radiant_win"
        case startTime = "start_time"
        case duration
        case cluster
        case lobbyType = "lobby_type"
        case gameMode = "game_mode"
        case patch
        case region
        case isRadiant
        case win
        case lose
        case totalGold = "total_gold"
        case totalXp = "total_xp"
        case killsPerMin = "kills_per_min"
        case kda
        case abandons
        case neutralKills = "neutral_kills"
        case towerKills = "tower_kills"
        case courierKills = "courier_kills"
        case laneKills = "lane_kills"
        case heroKills = "hero_kills"
        case observerKills = "observer_kills"
        case sentryKills = "sentry_kills"
        case roshanKills = "roshan_kills"
        case necronomiconKills = "necronomicon_kills"
        case ancientKills = "ancient_kills"
        case buybackCount = "buyback_count"
        case observerUses = "observer_uses"
        case sentryUses = "sentry_uses"
        case laneEfficiency = "lane_efficiency"
        case laneEfficiencyPct = "lane_efficiency_pct"
        case lane
        case laneRole = "lane_role"
        case isRoaming = "is_roaming"
        case purchaseTime = "purchase_time"
        case firstPurchaseTime = "first_purchase_time"
        case itemWin = "item_win"
        case itemUsage = "item_usage"
        case purchaseTpscroll = "purchase_tpscroll"
        case actionsPerMin = "actions_per_min"
        case lifeStateDead = "life_state_dead"
        case rankTier = "rank_tier"
        case cosmetics
        case benchmarks
        case neutralTokensLog = "neutral_tokens_log"
        case neutralItemHistory = "neutral_item_history"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(matchId, forKey: .matchId)
        try container.encodeIfPresent(playerSlot, forKey: .playerSlot)
        try container.encodeIfPresent(abilityUpgradesArr, forKey: .abilityUpgradesArr)
        try container.encodeIfPresent(abilityUses, forKey: .abilityUses)
        try container.encodeIfPresent(abilityTargets, forKey: .abilityTargets)
        try container.encodeIfPresent(damageTargets, forKey: .damageTargets)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(actions, forKey: .actions)
        try container.encodeIfPresent(additionalUnits, forKey: .additionalUnits)
        try container.encodeIfPresent(assists, forKey: .assists)
        try container.encodeIfPresent(backpack0, forKey: .backpack0)
        try container.encodeIfPresent(backpack1, forKey: .backpack1)
        try container.encodeIfPresent(backpack2, forKey: .backpack2)
        try container.encodeIfPresent(buybackLog, forKey: .buybackLog)
        try container.encodeIfPresent(campsStacked, forKey: .campsStacked)
        try container.encodeIfPresent(connectionLog, forKey: .connectionLog)
        try container.encodeIfPresent(creepsStacked, forKey: .creepsStacked)
        try container.encodeIfPresent(damage, forKey: .damage)
        try container.encodeIfPresent(damageInflictor, forKey: .damageInflictor)
        try container.encodeIfPresent(damageInflictorReceived, forKey: .damageInflictorReceived)
        try container.encodeIfPresent(damageTaken, forKey: .damageTaken)
        try container.encodeIfPresent(deaths, forKey: .deaths)
        try container.encodeIfPresent(denies, forKey: .denies)
        try container.encodeIfPresent(dnT, forKey: .dnT)
        try container.encodeIfPresent(gold, forKey: .gold)
        try container.encodeIfPresent(goldPerMin, forKey: .goldPerMin)
        try container.encodeIfPresent(goldReasons, forKey: .goldReasons)
        try container.encodeIfPresent(goldSpent, forKey: .goldSpent)
        try container.encodeIfPresent(goldT, forKey: .goldT)
        try container.encodeIfPresent(heroDamage, forKey: .heroDamage)
        try container.encodeIfPresent(heroHealing, forKey: .heroHealing)
        try container.encodeIfPresent(heroHits, forKey: .heroHits)
        try container.encodeIfPresent(heroId, forKey: .heroId)
        try container.encodeIfPresent(item0, forKey: .item0)
        try container.encodeIfPresent(item1, forKey: .item1)
        try container.encodeIfPresent(item2, forKey: .item2)
        try container.encodeIfPresent(item3, forKey: .item3)
        try container.encodeIfPresent(item4, forKey: .item4)
        try container.encodeIfPresent(item5, forKey: .item5)
        try container.encodeIfPresent(itemUses, forKey: .itemUses)
        try container.encodeIfPresent(killStreaks, forKey: .killStreaks)
        try container.encodeIfPresent(killed, forKey: .killed)
        try container.encodeIfPresent(killedBy, forKey: .killedBy)
        try container.encodeIfPresent(kills, forKey: .kills)
        try container.encodeIfPresent(killsLog, forKey: .killsLog)
        try container.encodeIfPresent(lanePos, forKey: .lanePos)
        try container.encodeIfPresent(lastHits, forKey: .lastHits)
        try container.encodeIfPresent(leaverStatus, forKey: .leaverStatus)
        try container.encodeIfPresent(level, forKey: .level)
        try container.encodeIfPresent(lhT, forKey: .lhT)
        try container.encodeIfPresent(lifeState, forKey: .lifeState)
        try container.encodeIfPresent(maxHeroHit, forKey: .maxHeroHit)
        try container.encodeIfPresent(multiKills, forKey: .multiKills)
        try container.encodeIfPresent(obs, forKey: .obs)
        try container.encodeIfPresent(obsLeftLog, forKey: .obsLeftLog)
        try container.encodeIfPresent(obsLog, forKey: .obsLog)
        try container.encodeIfPresent(obsPlaced, forKey: .obsPlaced)
        try container.encodeIfPresent(partyId, forKey: .partyId)
        try container.encodeIfPresent(permanentBuffs, forKey: .permanentBuffs)
        try container.encodeIfPresent(heroVariant, forKey: .heroVariant)
        try container.encodeIfPresent(pings, forKey: .pings)
        try container.encodeIfPresent(purchase, forKey: .purchase)
        try container.encodeIfPresent(purchaseLog, forKey: .purchaseLog)
        try container.encodeIfPresent(runePickups, forKey: .runePickups)
        try container.encodeIfPresent(runes, forKey: .runes)
        try container.encodeIfPresent(runesLog, forKey: .runesLog)
        try container.encodeIfPresent(sen, forKey: .sen)
        try container.encodeIfPresent(senLeftLog, forKey: .senLeftLog)
        try container.encodeIfPresent(senLog, forKey: .senLog)
        try container.encodeIfPresent(senPlaced, forKey: .senPlaced)
        try container.encodeIfPresent(stuns, forKey: .stuns)
        try container.encodeIfPresent(times, forKey: .times)
        try container.encodeIfPresent(towerDamage, forKey: .towerDamage)
        try container.encodeIfPresent(xpPerMin, forKey: .xpPerMin)
        try container.encodeIfPresent(xpReasons, forKey: .xpReasons)
        try container.encodeIfPresent(xpT, forKey: .xpT)
        try container.encodeIfPresent(personaname, forKey: .personaname)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(radiantWin, forKey: .radiantWin)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(cluster, forKey: .cluster)
        try container.encodeIfPresent(lobbyType, forKey: .lobbyType)
        try container.encodeIfPresent(gameMode, forKey: .gameMode)
        try container.encodeIfPresent(patch, forKey: .patch)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(isRadiant, forKey: .isRadiant)
        try container.encodeIfPresent(win, forKey: .win)
        try container.encodeIfPresent(lose, forKey: .lose)
        try container.encodeIfPresent(totalGold, forKey: .totalGold)
        try container.encodeIfPresent(totalXp, forKey: .totalXp)
        try container.encodeIfPresent(killsPerMin, forKey: .killsPerMin)
        try container.encodeIfPresent(kda, forKey: .kda)
        try container.encodeIfPresent(abandons, forKey: .abandons)
        try container.encodeIfPresent(neutralKills, forKey: .neutralKills)
        try container.encodeIfPresent(towerKills, forKey: .towerKills)
        try container.encodeIfPresent(courierKills, forKey: .courierKills)
        try container.encodeIfPresent(laneKills, forKey: .laneKills)
        try container.encodeIfPresent(heroKills, forKey: .heroKills)
        try container.encodeIfPresent(observerKills, forKey: .observerKills)
        try container.encodeIfPresent(sentryKills, forKey: .sentryKills)
        try container.encodeIfPresent(roshanKills, forKey: .roshanKills)
        try container.encodeIfPresent(necronomiconKills, forKey: .necronomiconKills)
        try container.encodeIfPresent(ancientKills, forKey: .ancientKills)
        try container.encodeIfPresent(buybackCount, forKey: .buybackCount)
        try container.encodeIfPresent(observerUses, forKey: .observerUses)
        try container.encodeIfPresent(sentryUses, forKey: .sentryUses)
        try container.encodeIfPresent(laneEfficiency, forKey: .laneEfficiency)
        try container.encodeIfPresent(laneEfficiencyPct, forKey: .laneEfficiencyPct)
        try container.encodeIfPresent(lane, forKey: .lane)
        try container.encodeIfPresent(laneRole, forKey: .laneRole)
        try container.encodeIfPresent(isRoaming, forKey: .isRoaming)
        try container.encodeIfPresent(purchaseTime, forKey: .purchaseTime)
        try container.encodeIfPresent(firstPurchaseTime, forKey: .firstPurchaseTime)
        try container.encodeIfPresent(itemWin, forKey: .itemWin)
        try container.encodeIfPresent(itemUsage, forKey: .itemUsage)
        try container.encodeIfPresent(purchaseTpscroll, forKey: .purchaseTpscroll)
        try container.encodeIfPresent(actionsPerMin, forKey: .actionsPerMin)
        try container.encodeIfPresent(lifeStateDead, forKey: .lifeStateDead)
        try container.encodeIfPresent(rankTier, forKey: .rankTier)
        try container.encodeIfPresent(cosmetics, forKey: .cosmetics)
        try container.encodeIfPresent(benchmarks, forKey: .benchmarks)
        try container.encodeIfPresent(neutralTokensLog, forKey: .neutralTokensLog)
        try container.encodeIfPresent(neutralItemHistory, forKey: .neutralItemHistory)
    }
}

