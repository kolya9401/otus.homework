//
// MatchObjectResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MatchObjectResponse: Codable, JSONEncodable, Hashable {

    /** The ID number of the match assigned by Valve */
    public var matchId: Int?
    /** Duration of the game in seconds */
    public var duration: Int?
    /** The Unix timestamp at which the game started */
    public var startTime: Int?
    /** The Radiant's team_id */
    public var radiantTeamId: Int?
    /** The Radiant's team name */
    public var radiantName: String?
    /** The Dire's team_id */
    public var direTeamId: Int?
    /** The Dire's team name */
    public var direName: String?
    /** Identifier for the league the match took place in */
    public var leagueid: Int?
    /** Name of league the match took place in */
    public var leagueName: String?
    /** Identifier for the series of the match */
    public var seriesId: Int?
    /** Type of series the match was */
    public var seriesType: Int?
    /** Number of kills the Radiant team had when the match ended */
    public var radiantScore: Int?
    /** Number of kills the Dire team had when the match ended */
    public var direScore: Int?
    /** Boolean indicating whether Radiant won the match */
    public var radiantWin: Bool?
    /** Whether the team/player/hero was on Radiant */
    public var radiant: Bool?

    public init(matchId: Int? = nil, duration: Int? = nil, startTime: Int? = nil, radiantTeamId: Int? = nil, radiantName: String? = nil, direTeamId: Int? = nil, direName: String? = nil, leagueid: Int? = nil, leagueName: String? = nil, seriesId: Int? = nil, seriesType: Int? = nil, radiantScore: Int? = nil, direScore: Int? = nil, radiantWin: Bool? = nil, radiant: Bool? = nil) {
        self.matchId = matchId
        self.duration = duration
        self.startTime = startTime
        self.radiantTeamId = radiantTeamId
        self.radiantName = radiantName
        self.direTeamId = direTeamId
        self.direName = direName
        self.leagueid = leagueid
        self.leagueName = leagueName
        self.seriesId = seriesId
        self.seriesType = seriesType
        self.radiantScore = radiantScore
        self.direScore = direScore
        self.radiantWin = radiantWin
        self.radiant = radiant
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case matchId = "match_id"
        case duration
        case startTime = "start_time"
        case radiantTeamId = "radiant_team_id"
        case radiantName = "radiant_name"
        case direTeamId = "dire_team_id"
        case direName = "dire_name"
        case leagueid
        case leagueName = "league_name"
        case seriesId = "series_id"
        case seriesType = "series_type"
        case radiantScore = "radiant_score"
        case direScore = "dire_score"
        case radiantWin = "radiant_win"
        case radiant
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(matchId, forKey: .matchId)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(radiantTeamId, forKey: .radiantTeamId)
        try container.encodeIfPresent(radiantName, forKey: .radiantName)
        try container.encodeIfPresent(direTeamId, forKey: .direTeamId)
        try container.encodeIfPresent(direName, forKey: .direName)
        try container.encodeIfPresent(leagueid, forKey: .leagueid)
        try container.encodeIfPresent(leagueName, forKey: .leagueName)
        try container.encodeIfPresent(seriesId, forKey: .seriesId)
        try container.encodeIfPresent(seriesType, forKey: .seriesType)
        try container.encodeIfPresent(radiantScore, forKey: .radiantScore)
        try container.encodeIfPresent(direScore, forKey: .direScore)
        try container.encodeIfPresent(radiantWin, forKey: .radiantWin)
        try container.encodeIfPresent(radiant, forKey: .radiant)
    }
}

