//
// PlayerHeroesResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** hero */
public struct PlayerHeroesResponse: Codable, JSONEncodable, Hashable {

    /** The ID value of the hero played */
    public var heroId: Int?
    /** last_played */
    public var lastPlayed: Int?
    /** games */
    public var games: Int?
    /** win */
    public var win: Int?
    /** with_games */
    public var withGames: Int?
    /** with_win */
    public var withWin: Int?
    /** against_games */
    public var againstGames: Int?
    /** against_win */
    public var againstWin: Int?

    public init(heroId: Int? = nil, lastPlayed: Int? = nil, games: Int? = nil, win: Int? = nil, withGames: Int? = nil, withWin: Int? = nil, againstGames: Int? = nil, againstWin: Int? = nil) {
        self.heroId = heroId
        self.lastPlayed = lastPlayed
        self.games = games
        self.win = win
        self.withGames = withGames
        self.withWin = withWin
        self.againstGames = againstGames
        self.againstWin = againstWin
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case heroId = "hero_id"
        case lastPlayed = "last_played"
        case games
        case win
        case withGames = "with_games"
        case withWin = "with_win"
        case againstGames = "against_games"
        case againstWin = "against_win"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(heroId, forKey: .heroId)
        try container.encodeIfPresent(lastPlayed, forKey: .lastPlayed)
        try container.encodeIfPresent(games, forKey: .games)
        try container.encodeIfPresent(win, forKey: .win)
        try container.encodeIfPresent(withGames, forKey: .withGames)
        try container.encodeIfPresent(withWin, forKey: .withWin)
        try container.encodeIfPresent(againstGames, forKey: .againstGames)
        try container.encodeIfPresent(againstWin, forKey: .againstWin)
    }
}

