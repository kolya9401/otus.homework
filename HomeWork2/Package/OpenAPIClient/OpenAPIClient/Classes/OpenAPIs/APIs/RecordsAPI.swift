//
// RecordsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RecordsAPI {

    /**
     GET /records/{field}
     
     - parameter field: (path) Field name to query 
     - returns: [RecordsResponse]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getRecordsByField(field: String) async throws -> [RecordsResponse] {
        return try await getRecordsByFieldWithRequestBuilder(field: field).execute().body
    }

    /**
     GET /records/{field}
     - GET /records/{field}
     - Get top performances in a stat
     - parameter field: (path) Field name to query 
     - returns: RequestBuilder<[RecordsResponse]> 
     */
    open class func getRecordsByFieldWithRequestBuilder(field: String) -> RequestBuilder<[RecordsResponse]> {
        var localVariablePath = "/records/{field}"
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RecordsResponse]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
