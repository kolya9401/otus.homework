//
// HeroStatsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct HeroStatsResponse: Codable, JSONEncodable, Hashable {

    /** The ID value of the hero played */
    public var id: Int?
    /** Dota hero command name */
    public var name: String?
    /** Hero name */
    public var localizedName: String?
    /** primary_attr */
    public var primaryAttr: String?
    /** attack_type */
    public var attackType: String?
    /** roles */
    public var roles: [String]?
    /** img */
    public var img: String?
    /** icon */
    public var icon: String?
    /** base_health */
    public var baseHealth: Int?
    /** base_health_regen */
    public var baseHealthRegen: Double?
    /** base_mana */
    public var baseMana: Int?
    /** base_mana_regen */
    public var baseManaRegen: Int?
    /** base_armor */
    public var baseArmor: Int?
    /** base_mr */
    public var baseMr: Int?
    /** base_attack_min */
    public var baseAttackMin: Int?
    /** base_attack_max */
    public var baseAttackMax: Int?
    /** base_str */
    public var baseStr: Int?
    /** base_agi */
    public var baseAgi: Int?
    /** base_int */
    public var baseInt: Int?
    /** str_gain */
    public var strGain: Double?
    /** agi_gain */
    public var agiGain: Double?
    /** int_gain */
    public var intGain: Double?
    /** attack_range */
    public var attackRange: Int?
    /** projectile_speed */
    public var projectileSpeed: Int?
    /** attack_rate */
    public var attackRate: Double?
    /** base_attack_time */
    public var baseAttackTime: Int?
    /** attack_point */
    public var attackPoint: Double?
    /** move_speed */
    public var moveSpeed: Int?
    /** turn_rate */
    public var turnRate: Double?
    /** cm_enabled */
    public var cmEnabled: Bool?
    /** legs */
    public var legs: Int?
    /** day_vision */
    public var dayVision: Int?
    /** night_vision */
    public var nightVision: Int?
    /** The ID value of the hero played */
    public var heroId: Int?
    /** Picks in Turbo mode this month */
    public var turboPicks: Int?
    /** Wins in Turbo mode this month */
    public var turboWins: Int?
    /** pro_ban */
    public var proBan: Int?
    /** pro_win */
    public var proWin: Int?
    /** pro_pick */
    public var proPick: Int?
    /** Herald picks */
    public var _1pick: Int?
    /** Herald wins */
    public var _1win: Int?
    /** Guardian picks */
    public var _2pick: Int?
    /** Guardian wins */
    public var _2win: Int?
    /** Crusader picks */
    public var _3pick: Int?
    /** Crusader wins */
    public var _3win: Int?
    /** Archon picks */
    public var _4pick: Int?
    /** Archon wins */
    public var _4win: Int?
    /** Legend picks */
    public var _5pick: Int?
    /** Legend wins */
    public var _5win: Int?
    /** Ancient picks */
    public var _6pick: Int?
    /** Ancient wins */
    public var _6win: Int?
    /** Divine picks */
    public var _7pick: Int?
    /** Divine wins */
    public var _7win: Int?
    /** Immortal picks */
    public var _8pick: Int?
    /** Immortal wins */
    public var _8win: Int?

    public init(id: Int? = nil, name: String? = nil, localizedName: String? = nil, primaryAttr: String? = nil, attackType: String? = nil, roles: [String]? = nil, img: String? = nil, icon: String? = nil, baseHealth: Int? = nil, baseHealthRegen: Double? = nil, baseMana: Int? = nil, baseManaRegen: Int? = nil, baseArmor: Int? = nil, baseMr: Int? = nil, baseAttackMin: Int? = nil, baseAttackMax: Int? = nil, baseStr: Int? = nil, baseAgi: Int? = nil, baseInt: Int? = nil, strGain: Double? = nil, agiGain: Double? = nil, intGain: Double? = nil, attackRange: Int? = nil, projectileSpeed: Int? = nil, attackRate: Double? = nil, baseAttackTime: Int? = nil, attackPoint: Double? = nil, moveSpeed: Int? = nil, turnRate: Double? = nil, cmEnabled: Bool? = nil, legs: Int? = nil, dayVision: Int? = nil, nightVision: Int? = nil, heroId: Int? = nil, turboPicks: Int? = nil, turboWins: Int? = nil, proBan: Int? = nil, proWin: Int? = nil, proPick: Int? = nil, _1pick: Int? = nil, _1win: Int? = nil, _2pick: Int? = nil, _2win: Int? = nil, _3pick: Int? = nil, _3win: Int? = nil, _4pick: Int? = nil, _4win: Int? = nil, _5pick: Int? = nil, _5win: Int? = nil, _6pick: Int? = nil, _6win: Int? = nil, _7pick: Int? = nil, _7win: Int? = nil, _8pick: Int? = nil, _8win: Int? = nil) {
        self.id = id
        self.name = name
        self.localizedName = localizedName
        self.primaryAttr = primaryAttr
        self.attackType = attackType
        self.roles = roles
        self.img = img
        self.icon = icon
        self.baseHealth = baseHealth
        self.baseHealthRegen = baseHealthRegen
        self.baseMana = baseMana
        self.baseManaRegen = baseManaRegen
        self.baseArmor = baseArmor
        self.baseMr = baseMr
        self.baseAttackMin = baseAttackMin
        self.baseAttackMax = baseAttackMax
        self.baseStr = baseStr
        self.baseAgi = baseAgi
        self.baseInt = baseInt
        self.strGain = strGain
        self.agiGain = agiGain
        self.intGain = intGain
        self.attackRange = attackRange
        self.projectileSpeed = projectileSpeed
        self.attackRate = attackRate
        self.baseAttackTime = baseAttackTime
        self.attackPoint = attackPoint
        self.moveSpeed = moveSpeed
        self.turnRate = turnRate
        self.cmEnabled = cmEnabled
        self.legs = legs
        self.dayVision = dayVision
        self.nightVision = nightVision
        self.heroId = heroId
        self.turboPicks = turboPicks
        self.turboWins = turboWins
        self.proBan = proBan
        self.proWin = proWin
        self.proPick = proPick
        self._1pick = _1pick
        self._1win = _1win
        self._2pick = _2pick
        self._2win = _2win
        self._3pick = _3pick
        self._3win = _3win
        self._4pick = _4pick
        self._4win = _4win
        self._5pick = _5pick
        self._5win = _5win
        self._6pick = _6pick
        self._6win = _6win
        self._7pick = _7pick
        self._7win = _7win
        self._8pick = _8pick
        self._8win = _8win
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case localizedName = "localized_name"
        case primaryAttr = "primary_attr"
        case attackType = "attack_type"
        case roles
        case img
        case icon
        case baseHealth = "base_health"
        case baseHealthRegen = "base_health_regen"
        case baseMana = "base_mana"
        case baseManaRegen = "base_mana_regen"
        case baseArmor = "base_armor"
        case baseMr = "base_mr"
        case baseAttackMin = "base_attack_min"
        case baseAttackMax = "base_attack_max"
        case baseStr = "base_str"
        case baseAgi = "base_agi"
        case baseInt = "base_int"
        case strGain = "str_gain"
        case agiGain = "agi_gain"
        case intGain = "int_gain"
        case attackRange = "attack_range"
        case projectileSpeed = "projectile_speed"
        case attackRate = "attack_rate"
        case baseAttackTime = "base_attack_time"
        case attackPoint = "attack_point"
        case moveSpeed = "move_speed"
        case turnRate = "turn_rate"
        case cmEnabled = "cm_enabled"
        case legs
        case dayVision = "day_vision"
        case nightVision = "night_vision"
        case heroId = "hero_id"
        case turboPicks = "turbo_picks"
        case turboWins = "turbo_wins"
        case proBan = "pro_ban"
        case proWin = "pro_win"
        case proPick = "pro_pick"
        case _1pick = "1_pick"
        case _1win = "1_win"
        case _2pick = "2_pick"
        case _2win = "2_win"
        case _3pick = "3_pick"
        case _3win = "3_win"
        case _4pick = "4_pick"
        case _4win = "4_win"
        case _5pick = "5_pick"
        case _5win = "5_win"
        case _6pick = "6_pick"
        case _6win = "6_win"
        case _7pick = "7_pick"
        case _7win = "7_win"
        case _8pick = "8_pick"
        case _8win = "8_win"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(localizedName, forKey: .localizedName)
        try container.encodeIfPresent(primaryAttr, forKey: .primaryAttr)
        try container.encodeIfPresent(attackType, forKey: .attackType)
        try container.encodeIfPresent(roles, forKey: .roles)
        try container.encodeIfPresent(img, forKey: .img)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(baseHealth, forKey: .baseHealth)
        try container.encodeIfPresent(baseHealthRegen, forKey: .baseHealthRegen)
        try container.encodeIfPresent(baseMana, forKey: .baseMana)
        try container.encodeIfPresent(baseManaRegen, forKey: .baseManaRegen)
        try container.encodeIfPresent(baseArmor, forKey: .baseArmor)
        try container.encodeIfPresent(baseMr, forKey: .baseMr)
        try container.encodeIfPresent(baseAttackMin, forKey: .baseAttackMin)
        try container.encodeIfPresent(baseAttackMax, forKey: .baseAttackMax)
        try container.encodeIfPresent(baseStr, forKey: .baseStr)
        try container.encodeIfPresent(baseAgi, forKey: .baseAgi)
        try container.encodeIfPresent(baseInt, forKey: .baseInt)
        try container.encodeIfPresent(strGain, forKey: .strGain)
        try container.encodeIfPresent(agiGain, forKey: .agiGain)
        try container.encodeIfPresent(intGain, forKey: .intGain)
        try container.encodeIfPresent(attackRange, forKey: .attackRange)
        try container.encodeIfPresent(projectileSpeed, forKey: .projectileSpeed)
        try container.encodeIfPresent(attackRate, forKey: .attackRate)
        try container.encodeIfPresent(baseAttackTime, forKey: .baseAttackTime)
        try container.encodeIfPresent(attackPoint, forKey: .attackPoint)
        try container.encodeIfPresent(moveSpeed, forKey: .moveSpeed)
        try container.encodeIfPresent(turnRate, forKey: .turnRate)
        try container.encodeIfPresent(cmEnabled, forKey: .cmEnabled)
        try container.encodeIfPresent(legs, forKey: .legs)
        try container.encodeIfPresent(dayVision, forKey: .dayVision)
        try container.encodeIfPresent(nightVision, forKey: .nightVision)
        try container.encodeIfPresent(heroId, forKey: .heroId)
        try container.encodeIfPresent(turboPicks, forKey: .turboPicks)
        try container.encodeIfPresent(turboWins, forKey: .turboWins)
        try container.encodeIfPresent(proBan, forKey: .proBan)
        try container.encodeIfPresent(proWin, forKey: .proWin)
        try container.encodeIfPresent(proPick, forKey: .proPick)
        try container.encodeIfPresent(_1pick, forKey: ._1pick)
        try container.encodeIfPresent(_1win, forKey: ._1win)
        try container.encodeIfPresent(_2pick, forKey: ._2pick)
        try container.encodeIfPresent(_2win, forKey: ._2win)
        try container.encodeIfPresent(_3pick, forKey: ._3pick)
        try container.encodeIfPresent(_3win, forKey: ._3win)
        try container.encodeIfPresent(_4pick, forKey: ._4pick)
        try container.encodeIfPresent(_4win, forKey: ._4win)
        try container.encodeIfPresent(_5pick, forKey: ._5pick)
        try container.encodeIfPresent(_5win, forKey: ._5win)
        try container.encodeIfPresent(_6pick, forKey: ._6pick)
        try container.encodeIfPresent(_6win, forKey: ._6win)
        try container.encodeIfPresent(_7pick, forKey: ._7pick)
        try container.encodeIfPresent(_7win, forKey: ._7win)
        try container.encodeIfPresent(_8pick, forKey: ._8pick)
        try container.encodeIfPresent(_8win, forKey: ._8win)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension HeroStatsResponse: Identifiable {}
