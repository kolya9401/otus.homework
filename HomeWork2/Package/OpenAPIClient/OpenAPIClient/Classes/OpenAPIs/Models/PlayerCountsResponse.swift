//
// PlayerCountsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PlayerCountsResponse: Codable, JSONEncodable, Hashable {

    /** Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned */
    public var leaverStatus: AnyCodable?
    /** Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json */
    public var gameMode: AnyCodable?
    /** Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json */
    public var lobbyType: AnyCodable?
    /** lane_role */
    public var laneRole: AnyCodable?
    /** Integer corresponding to the region the game was played on */
    public var region: AnyCodable?
    /** Patch ID, from dotaconstants */
    public var patch: AnyCodable?

    public init(leaverStatus: AnyCodable? = nil, gameMode: AnyCodable? = nil, lobbyType: AnyCodable? = nil, laneRole: AnyCodable? = nil, region: AnyCodable? = nil, patch: AnyCodable? = nil) {
        self.leaverStatus = leaverStatus
        self.gameMode = gameMode
        self.lobbyType = lobbyType
        self.laneRole = laneRole
        self.region = region
        self.patch = patch
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case leaverStatus = "leaver_status"
        case gameMode = "game_mode"
        case lobbyType = "lobby_type"
        case laneRole = "lane_role"
        case region
        case patch
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(leaverStatus, forKey: .leaverStatus)
        try container.encodeIfPresent(gameMode, forKey: .gameMode)
        try container.encodeIfPresent(lobbyType, forKey: .lobbyType)
        try container.encodeIfPresent(laneRole, forKey: .laneRole)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(patch, forKey: .patch)
    }
}

