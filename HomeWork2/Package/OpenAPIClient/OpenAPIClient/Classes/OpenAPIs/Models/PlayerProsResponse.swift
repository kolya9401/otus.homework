//
// PlayerProsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PlayerProsResponse: Codable, JSONEncodable, Hashable {

    /** The player account ID */
    public var accountId: Int?
    /** name */
    public var name: String?
    /** country_code */
    public var countryCode: String?
    /** fantasy_role */
    public var fantasyRole: Int?
    /** team_id */
    public var teamId: Int?
    /** Team name */
    public var teamName: String?
    /** team_tag */
    public var teamTag: String?
    /** is_locked */
    public var isLocked: Bool?
    /** is_pro */
    public var isPro: Bool?
    /** locked_until */
    public var lockedUntil: Int?
    /** steamid */
    public var steamid: String?
    /** avatar */
    public var avatar: String?
    /** avatarmedium */
    public var avatarmedium: String?
    /** avatarfull */
    public var avatarfull: String?
    /** profileurl */
    public var profileurl: String?
    /** last_login */
    public var lastLogin: Date?
    /** full_history_time */
    public var fullHistoryTime: Date?
    /** cheese */
    public var cheese: Int?
    /** fh_unavailable */
    public var fhUnavailable: Bool?
    /** loccountrycode */
    public var loccountrycode: String?
    /** last_played */
    public var lastPlayed: Int?
    /** win */
    public var win: Int?
    /** games */
    public var games: Int?
    /** with_win */
    public var withWin: Int?
    /** with_games */
    public var withGames: Int?
    /** against_win */
    public var againstWin: Int?
    /** against_games */
    public var againstGames: Int?
    /** with_gpm_sum */
    public var withGpmSum: Int?
    /** with_xpm_sum */
    public var withXpmSum: Int?

    public init(accountId: Int? = nil, name: String? = nil, countryCode: String? = nil, fantasyRole: Int? = nil, teamId: Int? = nil, teamName: String? = nil, teamTag: String? = nil, isLocked: Bool? = nil, isPro: Bool? = nil, lockedUntil: Int? = nil, steamid: String? = nil, avatar: String? = nil, avatarmedium: String? = nil, avatarfull: String? = nil, profileurl: String? = nil, lastLogin: Date? = nil, fullHistoryTime: Date? = nil, cheese: Int? = nil, fhUnavailable: Bool? = nil, loccountrycode: String? = nil, lastPlayed: Int? = nil, win: Int? = nil, games: Int? = nil, withWin: Int? = nil, withGames: Int? = nil, againstWin: Int? = nil, againstGames: Int? = nil, withGpmSum: Int? = nil, withXpmSum: Int? = nil) {
        self.accountId = accountId
        self.name = name
        self.countryCode = countryCode
        self.fantasyRole = fantasyRole
        self.teamId = teamId
        self.teamName = teamName
        self.teamTag = teamTag
        self.isLocked = isLocked
        self.isPro = isPro
        self.lockedUntil = lockedUntil
        self.steamid = steamid
        self.avatar = avatar
        self.avatarmedium = avatarmedium
        self.avatarfull = avatarfull
        self.profileurl = profileurl
        self.lastLogin = lastLogin
        self.fullHistoryTime = fullHistoryTime
        self.cheese = cheese
        self.fhUnavailable = fhUnavailable
        self.loccountrycode = loccountrycode
        self.lastPlayed = lastPlayed
        self.win = win
        self.games = games
        self.withWin = withWin
        self.withGames = withGames
        self.againstWin = againstWin
        self.againstGames = againstGames
        self.withGpmSum = withGpmSum
        self.withXpmSum = withXpmSum
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case name
        case countryCode = "country_code"
        case fantasyRole = "fantasy_role"
        case teamId = "team_id"
        case teamName = "team_name"
        case teamTag = "team_tag"
        case isLocked = "is_locked"
        case isPro = "is_pro"
        case lockedUntil = "locked_until"
        case steamid
        case avatar
        case avatarmedium
        case avatarfull
        case profileurl
        case lastLogin = "last_login"
        case fullHistoryTime = "full_history_time"
        case cheese
        case fhUnavailable = "fh_unavailable"
        case loccountrycode
        case lastPlayed = "last_played"
        case win
        case games
        case withWin = "with_win"
        case withGames = "with_games"
        case againstWin = "against_win"
        case againstGames = "against_games"
        case withGpmSum = "with_gpm_sum"
        case withXpmSum = "with_xpm_sum"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(fantasyRole, forKey: .fantasyRole)
        try container.encodeIfPresent(teamId, forKey: .teamId)
        try container.encodeIfPresent(teamName, forKey: .teamName)
        try container.encodeIfPresent(teamTag, forKey: .teamTag)
        try container.encodeIfPresent(isLocked, forKey: .isLocked)
        try container.encodeIfPresent(isPro, forKey: .isPro)
        try container.encodeIfPresent(lockedUntil, forKey: .lockedUntil)
        try container.encodeIfPresent(steamid, forKey: .steamid)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(avatarmedium, forKey: .avatarmedium)
        try container.encodeIfPresent(avatarfull, forKey: .avatarfull)
        try container.encodeIfPresent(profileurl, forKey: .profileurl)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(fullHistoryTime, forKey: .fullHistoryTime)
        try container.encodeIfPresent(cheese, forKey: .cheese)
        try container.encodeIfPresent(fhUnavailable, forKey: .fhUnavailable)
        try container.encodeIfPresent(loccountrycode, forKey: .loccountrycode)
        try container.encodeIfPresent(lastPlayed, forKey: .lastPlayed)
        try container.encodeIfPresent(win, forKey: .win)
        try container.encodeIfPresent(games, forKey: .games)
        try container.encodeIfPresent(withWin, forKey: .withWin)
        try container.encodeIfPresent(withGames, forKey: .withGames)
        try container.encodeIfPresent(againstWin, forKey: .againstWin)
        try container.encodeIfPresent(againstGames, forKey: .againstGames)
        try container.encodeIfPresent(withGpmSum, forKey: .withGpmSum)
        try container.encodeIfPresent(withXpmSum, forKey: .withXpmSum)
    }
}

