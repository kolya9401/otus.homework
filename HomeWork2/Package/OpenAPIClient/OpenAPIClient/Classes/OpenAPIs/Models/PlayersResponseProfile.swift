//
// PlayersResponseProfile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** profile */
public struct PlayersResponseProfile: Codable, JSONEncodable, Hashable {

    /** The player account ID */
    public var accountId: Int?
    /** Player's Steam name */
    public var personaname: String?
    /** name */
    public var name: String?
    /** Boolean indicating status of current Dota Plus subscription */
    public var plus: Bool?
    /** cheese */
    public var cheese: Int?
    /** steamid */
    public var steamid: String?
    /** avatar */
    public var avatar: String?
    /** avatarmedium */
    public var avatarmedium: String?
    /** avatarfull */
    public var avatarfull: String?
    /** profileurl */
    public var profileurl: String?
    /** last_login */
    public var lastLogin: String?
    /** loccountrycode */
    public var loccountrycode: String?
    /** Boolean indicating if the user contributed to the development of OpenDota */
    public var isContributor: Bool? = false
    /** Boolean indicating if the user subscribed to OpenDota */
    public var isSubscriber: Bool? = false

    public init(accountId: Int? = nil, personaname: String? = nil, name: String? = nil, plus: Bool? = nil, cheese: Int? = nil, steamid: String? = nil, avatar: String? = nil, avatarmedium: String? = nil, avatarfull: String? = nil, profileurl: String? = nil, lastLogin: String? = nil, loccountrycode: String? = nil, isContributor: Bool? = false, isSubscriber: Bool? = false) {
        self.accountId = accountId
        self.personaname = personaname
        self.name = name
        self.plus = plus
        self.cheese = cheese
        self.steamid = steamid
        self.avatar = avatar
        self.avatarmedium = avatarmedium
        self.avatarfull = avatarfull
        self.profileurl = profileurl
        self.lastLogin = lastLogin
        self.loccountrycode = loccountrycode
        self.isContributor = isContributor
        self.isSubscriber = isSubscriber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case personaname
        case name
        case plus
        case cheese
        case steamid
        case avatar
        case avatarmedium
        case avatarfull
        case profileurl
        case lastLogin = "last_login"
        case loccountrycode
        case isContributor = "is_contributor"
        case isSubscriber = "is_subscriber"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(personaname, forKey: .personaname)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(plus, forKey: .plus)
        try container.encodeIfPresent(cheese, forKey: .cheese)
        try container.encodeIfPresent(steamid, forKey: .steamid)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(avatarmedium, forKey: .avatarmedium)
        try container.encodeIfPresent(avatarfull, forKey: .avatarfull)
        try container.encodeIfPresent(profileurl, forKey: .profileurl)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(loccountrycode, forKey: .loccountrycode)
        try container.encodeIfPresent(isContributor, forKey: .isContributor)
        try container.encodeIfPresent(isSubscriber, forKey: .isSubscriber)
    }
}

