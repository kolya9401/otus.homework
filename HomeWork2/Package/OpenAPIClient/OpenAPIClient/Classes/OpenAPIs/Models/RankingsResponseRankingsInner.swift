//
// RankingsResponseRankingsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RankingsResponseRankingsInner: Codable, JSONEncodable, Hashable {

    /** The player account ID */
    public var accountId: Int?
    /** Score */
    public var score: Double?
    /** steamid */
    public var steamid: String?
    /** avatar */
    public var avatar: String?
    /** avatarmedium */
    public var avatarmedium: String?
    /** avatarfull */
    public var avatarfull: String?
    /** profileurl */
    public var profileurl: String?
    /** Player's Steam name */
    public var personaname: String?
    /** last_login */
    public var lastLogin: Date?
    /** full_history_time */
    public var fullHistoryTime: Date?
    /** cheese */
    public var cheese: Int?
    /** fh_unavailable */
    public var fhUnavailable: Bool?
    /** loccountrycode */
    public var loccountrycode: String?
    /** rank_tier */
    public var rankTier: Int?

    public init(accountId: Int? = nil, score: Double? = nil, steamid: String? = nil, avatar: String? = nil, avatarmedium: String? = nil, avatarfull: String? = nil, profileurl: String? = nil, personaname: String? = nil, lastLogin: Date? = nil, fullHistoryTime: Date? = nil, cheese: Int? = nil, fhUnavailable: Bool? = nil, loccountrycode: String? = nil, rankTier: Int? = nil) {
        self.accountId = accountId
        self.score = score
        self.steamid = steamid
        self.avatar = avatar
        self.avatarmedium = avatarmedium
        self.avatarfull = avatarfull
        self.profileurl = profileurl
        self.personaname = personaname
        self.lastLogin = lastLogin
        self.fullHistoryTime = fullHistoryTime
        self.cheese = cheese
        self.fhUnavailable = fhUnavailable
        self.loccountrycode = loccountrycode
        self.rankTier = rankTier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case score
        case steamid
        case avatar
        case avatarmedium
        case avatarfull
        case profileurl
        case personaname
        case lastLogin = "last_login"
        case fullHistoryTime = "full_history_time"
        case cheese
        case fhUnavailable = "fh_unavailable"
        case loccountrycode
        case rankTier = "rank_tier"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(score, forKey: .score)
        try container.encodeIfPresent(steamid, forKey: .steamid)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(avatarmedium, forKey: .avatarmedium)
        try container.encodeIfPresent(avatarfull, forKey: .avatarfull)
        try container.encodeIfPresent(profileurl, forKey: .profileurl)
        try container.encodeIfPresent(personaname, forKey: .personaname)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(fullHistoryTime, forKey: .fullHistoryTime)
        try container.encodeIfPresent(cheese, forKey: .cheese)
        try container.encodeIfPresent(fhUnavailable, forKey: .fhUnavailable)
        try container.encodeIfPresent(loccountrycode, forKey: .loccountrycode)
        try container.encodeIfPresent(rankTier, forKey: .rankTier)
    }
}

